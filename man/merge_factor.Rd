% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_levels.R
\name{merge_factor}
\alias{merge_factor}
\title{Combine/rename/reorder levels in a factor}
\usage{
merge_factor(.data, arg_list, contr_f = NULL, ...)
}
\arguments{
\item{.data}{the factor you want to respecify}

\item{arg_list}{a list whose names are the new levels, whose values are the old levels, and whose order is the new order of the levels}

\item{contr_f}{Optional function to determine contrast code. I.e., \code{contr.sum}, or \code{contr.helmert}, etc. If unused, \code{merge_factor} won't touch the contrast coding. Automatically names contrasts as would appear by default.}

\item{\dots}{Optional arguments to pass in to \code{contr_f}}
}
\value{
a factor with levels and values as you specified
}
\description{
Instead of using  \code{ifelse} statements to combine values in a factor
(e.g. when you want to simplify variables for a model), you can rename,
combine, and reorder the levels of a factor with one easy list. If there's an empty
level that isn't included, \code{merge_factor} will warn you, but go ahead and remove it.
}
\details{
The same effect \strong{could} be achieved with something like:
\code{levels(my_factor)<-c(old1=new1,old2=new1,old3=new2,old4=new2)},
but \code{merge_factor()} saves typing by letting you type the
inverse--in essence: \code{levels(my_factor)<-list(new1=c(old1,old2),new2=c(old3,old4))}.
}
\examples{
my_factor <- factor(c("d","b","c","d","a","a","d","d"))
levels(my_factor)
merge_factor(my_factor, list("CIsFirst"="c","AandB"=c("a","b"),"d"))

# Demonstrates how contrasts are named by default
merged_factor <- merge_factor(my_factor, 
                              list("CIsFirst"="c","AandB"=c("a","b"),"d"),
                              contr.helmert)
merged_factor
contrasts(merged_factor)


}

