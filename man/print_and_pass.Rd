% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/print_and_pass.R
\name{print_and_pass}
\alias{print_and_pass}
\title{Print within pipes}
\usage{
print_and_pass(.x, .f = identity, .text = NULL, ...)
}
\arguments{
\item{.x}{Whatever is being piped down the pipeline}

\item{.f}{A function, formula, or atomic vector, which will be applied to `.x` and whose output will be printed. `print_and_pass()` uses the \code{\link[purrr]{as_mapper}} to turn this value into a function, so see that documentation. By default, it will just print `x`.}

\item{.text}{When explicitly set to a non-`NULL` value, `print_and_pass` with just print that value instead. It is intended to be a string, if used.}

\item{\dots}{Additional \emph{named} arguments for whatever function is being passed in.}
}
\value{
The value of `.x`
}
\description{
This function can be placed within a sequence of `%>%` pipes for debugging purposes.
It will literally print the output of the function you specify on whatever was passed into it, and then pass it out, untouched.  If you want to just print a string with no bearing on whatever is being piped, then set the `.text` variable to that string.
}
\examples{
df <- data.frame(x=runif(10))
new_df <- df \%>\%
  print_and_pass(.text="BEGIN DEBUG") \%>\%
  dplyr::mutate(y=x+4) \%>\%
  print_and_pass(~.$y) \%>\%
  dplyr::filter(y>4) \%>\%
  print_and_pass(.text="END DEBUG")
}

